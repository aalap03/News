apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'

apply plugin: 'kotlin-android-extensions'

apply plugin: 'kotlin-kapt'

apply plugin: 'realm-android'

def credentialFile = rootProject.file("credentials.properties")
def credentialProperty = new Properties()
credentialProperty.load(new FileInputStream(credentialFile))

android {
    compileSdkVersion 28
    defaultConfig {
        applicationId "com.example.aalap.news"
        minSdkVersion 21
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        buildConfigField("String", "NEWS_API_KEY", credentialProperty["NEWS_API_KEY"])
        buildConfigField("String", "WEATHER_API_KEY", credentialProperty["WEATHER_API_KEY"])
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    android {
        compileOptions {
            sourceCompatibility JavaVersion.VERSION_1_8
            targetCompatibility JavaVersion.VERSION_1_8
        }
    }

    androidExtensions {
        experimental = true
    }

    // APK splitting
    splits {
        abi {
            // Enable APK splitting wrt architecture
            enable true

            // Reset the architectures for which you need to build the APKs for
            reset()

            // Include the architectures for which Gradle is building APKs
            include 'x86', 'x86_64', 'armeabi-v7a', 'arm64-v8a'

            // Set this to false if you don't want an APK that has native code for all architectures
            universalApk false
        }
    }

    // Assign codes to each architecture
    project.ext.versionCodes = ['x86': 0, 'x86_64': 1, 'armeabi-v7a': 2, 'arm64-v8a': 3]

    // Add the architecture-specific codes above to base version code, i.e. the version code specified in the defaultConfig{} block
    // Example: 2000 is the base version code -> 2000 (x86), 2001 (x86_64), 2002 (armeabi-v7a) & 2003 (arm64-v8a) would be the version codes for the generated APK files
    android.applicationVariants.all { variant ->
        variant.outputs.each { output ->
            output.versionCodeOverride = project.ext.versionCodes.get(output.getFilter(com.android.build.OutputFile.ABI), 0) * 1 + android.defaultConfig.versionCode
        }
    }


}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"

    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test:runner:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.1'

    def androidX = '1.0.0'

//    implementation 'com.android.support:appcompat-v7:28.0.0'

    implementation 'androidx.appcompat:appcompat:1.0.2'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation "androidx.recyclerview:recyclerview:$androidX"
    implementation "com.google.android.material:material:${androidX}"
    implementation "androidx.annotation:annotation:${androidX}"


    implementation "androidx.cardview:cardview:$androidX"
    implementation "androidx.legacy:legacy-support-v4:$androidX"
    implementation "androidx.gridlayout:gridlayout:$androidX"

    //rx
    implementation 'io.reactivex.rxjava2:rxandroid:2.1.1'
    implementation 'io.reactivex.rxjava2:rxjava:2.2.6'

    //newsRetrofit
    implementation 'com.squareup.retrofit2:retrofit:2.5.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.4.0'
    implementation 'com.squareup.retrofit2:adapter-rxjava2:2.4.0'

    //picasso
    implementation 'com.squareup.picasso:picasso:2.71828'

    ext.anko_version = '0.10.7'
    implementation "org.jetbrains.anko:anko:$anko_version"
    implementation 'com.google.android.gms:play-services-location:17.0.0'
    implementation 'pl.charmas.android:android-reactive-location2:2.1@aar'
    implementation 'com.github.GrenderG:Toasty:1.4.0'

}
